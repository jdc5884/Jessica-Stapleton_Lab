top=(sum(Ni*si/sqrt(ci))*(sum(Ni*si*(sqrt(ci)))))
bottom=(N^2*D)+sum(Ni*si^2)
n=top/bottom
newn=ceiling(n)
ni=ai*newn
print(ni)
round(ni)
Ni=c(155, 62, 93);
Ci=c(9, 9, 16)
Sigma=c(5, 15, 10)
N=sum(Ni)
B=2
D=B^2/4
TOP=sum(Ni*Sigma/sqrt(Ci))*sum(Ni*Sigma*sqrt(Ci))
Bottom=N^2*D+sum(Ni*Sigma^2)
n=TOP/Bottom
n_new=ceiling(n); print(n_new)
ai=(Ni*Sigma/sqrt(Ci))/(sum(Ni*Sigma/sqrt(Ci))); print(ai)
ni=n_new*ai; print(ni)
round(n_new*ai)
sum(round(n_new*ai))
Ni=c(155, 62, 93)
ci=c(9, 9, 16)
si=c(5, 15, 10)
N=sum(Ni)
B=2
D=B^2/4
ai=((Ni*si)/sqrt(ci))/(sum((Ni*si)/sqrt(ci)))
print(ai)
top=(sum(Ni*si/sqrt(ci))*(sum(Ni*si*(sqrt(ci)))))
bottom=(N^2*D)+sum(Ni*si^2)
n=top/bottom
newn=ceiling(n)
ni=ai*newn
print(ni)
round(ni)
library(MASS)
install.packages("ISLR") ## Only need to install once for your own computer
library(ISLR)
# Simple Linear Regression
fix(Boston)
names(Boston)
lm.fit=lm(medv~lstat) ##Error in eval(expr, envir, enclos) : object 'medv' not found
lm.fit=lm(medv~lstat,data=Boston)
lm.fit=lm(Boston$medv~Boston$lstat)
attach(Boston)
lm.fit=lm(medv~lstat)
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="prediction")
plot(lstat,medv)
abline(lm.fit)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3,col="red")
plot(lstat,medv,col="red")
plot(lstat,medv,pch=20)
plot(lstat,medv,pch="+")
plot(1:20,1:20,pch=1:20)
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
# Multiple Linear Regression
lm.fit=lm(medv~lstat+age,data=Boston)
summary(lm.fit)
lm.fit=lm(medv~.,data=Boston)
summary(lm.fit)
summary(lm.fit)$r.sq
summary(lm.fit)$sigma
install.packages("car")
library(car)
vif(lm.fit) #variance inflation factors
lm.fit1=lm(medv~.-age,data=Boston)
summary(lm.fit1)
lm.fit1=update(lm.fit, ~.-age)
# Interaction Terms
summary(lm(medv~lstat*age,data=Boston))
# Non-linear Transformations of the Predictors
lm.fit2=lm(medv~lstat+I(lstat^2))
summary(lm.fit2)
lm.fit=lm(medv~lstat)
anova(lm.fit,lm.fit2)
par(mfrow=c(2,2))
plot(lm.fit2)
lm.fit5=lm(medv~poly(lstat,5))
summary(lm.fit5)
summary(lm(medv~log(rm),data=Boston))
# Qualitative Predictors
fix(Carseats)
names(Carseats)
lm.fit=lm(Sales~.+Income:Advertising+Price:Age,data=Carseats)
summary(lm.fit)
attach(Carseats)
contrasts(ShelveLoc)
# Writing Functions
LoadLibraries #Error: object 'LoadLibraries' not found
LoadLibraries() #Error: could not find function "LoadLibraries"
LoadLibraries=function(){
library(ISLR)
library(MASS)
print("The libraries have been loaded.")
}
LoadLibraries
LoadLibraries()
###############################################
## All R-codes used in the Chapter 3 class PPT
###############################################
Advertising=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv", header=TRUE);
newdata=Advertising[,-1]
fix(newdata)
names(newdata)
pairs(newdata)
#################
## to get Table 3.1
lm.fit=lm(Sales~TV,data=Advertising)
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
#################
## To get Table 3.4 ##
lm.fit=lm(Sales~TV+Radio+Newspaper,data=Advertising)
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
#################
## To get Table 3.4 ##
lm.fit1=lm(Sales~Newspaper,data=Advertising)
summary(lm.fit1)
lm.fit2=lm(Sales~Newspaper+TV,data=Advertising)
summary(lm.fit2)
lm.fit3=lm(Sales~Newspaper+TV+Radio,data=Advertising)
summary(lm.fit3)
lm.fit4=lm(Sales~TV+Radio,data=Advertising)
summary(lm.fit4)
#################
par(mfrow=c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))
#################
Credit=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Credit.csv", header=TRUE);
head(Credit); newdata=Credit [,-1]
fix(newdata); names(newdata)
pairs(newdata[,c(1, 2, 4, 5, 6, 7)])
lm.fit=lm(Balance~Gender,data=Credit)
summary(lm.fit); contrasts(Credit$Gender)
lm.fit=lm(Balance~Ethnicity,data=Credit)
summary(lm.fit)
Advertising=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv", header=TRUE);
lm.fit=lm(Sales~TV*Radio,data=Advertising)
summary(lm.fit)
Credit=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Credit.csv", header=TRUE);
head(Credit); newdata=Credit [,-1]
fix(newdata); names(newdata)
pairs(newdata[,c(1, 2, 4, 5, 6, 7)])
Credit=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Credit.csv", header=TRUE);
lm.fit=lm(Balance~Gender,data=Credit)
summary(lm.fit); contrasts(Credit$Gender)
Credit=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Credit.csv", header=TRUE);
lm.fit=lm(Balance~Ethnicity,data=Credit)
summary(lm.fit)
Advertising=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv", header=TRUE);
lm.fit=lm(Sales~TV*Radio,data=Advertising)
summary(lm.fit)
fix(Boston)
names(Boston)
library(MASS)
install.packages("ISLR") ## Only need to install once for your own computer
library(ISLR)
install.packages("ISLR")
fix(Boston)
names(Boston)
fix(Boston)
names(Boston)
fix(Boston)
names(Boston)
names(Boston)
fix(Boston)
library(MASS)
install.packages("ISLR") ## Only need to install once for your own computer
library(ISLR)
# Simple Linear Regression
fix(Boston)
names(Boston)
fix(Boston)
library(MASS)
fix(Boston)
# Simple Linear Regression
Boston
fix(boston)
library(ISLR)
names(Boston)
# Chapter 3 Lab: Linear Regression
library(MASS)
install.packages("ISLR") ## Only need to install once for your own computer
library(ISLR)
# Simple Linear Regression
fix(Boston)
install.packages("ISLR")
dat = read.csv("OnlineNewsPopularity.csv", header=TRUE)
OnlineNews=dat[,-c(1:2,6:8,20:30,40:44,49:50,52:53,55:56)]
View(OnlineNews)
names(OnlineNews)
attach(OnlineNews)
install.packages("qtl2", repos="http://rqtl.org/qtl2cran")
install.packages(c("devtools", "yaml", "jsonlite", "data.table", "RcppEigen", "RSQLite", "qtl"))
install.packages(c("devtools", "yaml", "jsonlite", "data.table", "RcppEigen", "RSQLite", "qtl"))
library(devtools)
install_github("rqtl/qtl2")
library(qtl)
set.seed(27599)
test_cross <- qtl::sim.cross(map = qtl::sim.map(len = rep(100, 3), n.mar = 11, eq.spacing = TRUE, include.x = FALSE, anchor.tel = TRUE),
n.ind = 400,
type = 'f2')
test_cross$pheno$sex <- rep(x = c(0, 1), each = 200)
test_cross <- qtl::calc.genoprob(cross = test_cross, step = 2)
test_cross$pheno$phenotype1 <- rnorm(n = qtl::nind(test_cross))
test_cross$pheno$phenotype2 <- rnorm(n = qtl::nind(test_cross),
mean = 0.28*(test_cross$geno$`1`$data[,6] - 2))
test_cross$pheno$phenotype3 <- rnorm(n = qtl::nind(test_cross),
sd = exp(0.23*(test_cross$geno$`2`$data[,6] - 2)))
test_cross$pheno$phenotype4 <- rnorm(n = qtl::nind(test_cross),
mean = 0.24*(test_cross$geno$`3`$data[,6] - 2),
sd = exp(0.16*(test_cross$geno$`3`$data[,6] - 2)))
saveRDS(object = test_cross,
file = '~/Stapleton_Lab/madeuptest_cross.RDS')
library(qtl)
data(hyper)
ls()
summary(hyper)
samp=read.cross(file ="familyrandomsample.csv")
setwd("~/Stapleton_Lab")
samp=read.cross(file ="FRsample.csv")
setwd("~/Stapleton_Lab/FamilyRandom")
samp=read.cross(file ="familyrandomsample.csv")
data(samp)
samp=read.cross(file ="familyrandomsample.csv")
data(samp)
ls()
summary(hyper)
summary(samp)
samp=read.cross(file ="familyrandomsample.csv")
ls()
summary(samp)
plot(samp)
library(qtl)
samp=read.cross(file ="familyrandomsample.csv")
ls()
summary(samp)
plot(samp)
samp = calc.genoprob(samp)
out.nocovar = scanone(fake.bc,pheno.col=1:2)
samp = calc.genoprob(samp)
out.nocovar = scanone(samp,pheno.col=1:2)
plotstruc = samp$pheno$plotstructure
put.acovar = scanone(samp,pheno.col = 1:2, addcovar = plotstruc)
out.acovar = scanone(samp,pheno.col = 1:2, addcovar = plotstruc)
plot(out.nocovar)
plot(out.acovar)
?mfrow
??mfrow
plot(out.nocovar)
plot(out.acovar)
out.icovar = scanone(samp, pheno.col = 1:2, addcovar = plotstruc, intcovar = plotstruc)
warnings()
summary(out.icovar)
plot(out.acovar, out.icovar, chr=c(2,5), col=c("blue", "red"))
plot(out.acovar, out.icovar, chr=c(2,5), lodcolumn=2,
col=c("blue", "red"))
out.icovar = scanone(samp, pheno.col = 1:2, addcovar = plotstruc, intcovar = plotstruc)
summary(out.icovar)
plot(out.acovar, out.icovar, chr=c(2,5), col=c("blue", "red"))
plot(out.acovar, out.icovar, chr=c(2,5), lodcolumn=2,
col=c("blue", "red"))
out.plotint = out.icovar - out.acovar
plot(out.plotint, lodcolumn=1:2, chr=c(2,5), col=c("green", "purple"))
set.seed((1))
operm.acovar = scanone(samp, phen.col= 1:2, addcovar=plotstruc
method='hk', n.perm=100)
operm.acovar = scanone(samp, phen.col= 1:2, addcovar=plotstruc,
method='hk', n.perm=100)
operm.acovar = scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
method='hk', n.perm=100)
oper.icovar =  scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
intcovar = plotstruc, method='hk', n.perm=100)
operm.plotint = operm.icovar - operm.acovar
operm.icovar =  scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
intcovar = plotstruc, method='hk', n.perm=100)
operm.plotint = operm.icovar - operm.acovar
summary(operm.plotint, alpha=c(0.05, 0.20))
summary(out.plotint, perms = operm.plotint, alpha=0.1,
format = 'allpeaks',pvalues = TRUE)
setwd("~/Stapleton-Lab/vQTL Random and Family/data/tidied")
data=read.csv("familyandrandom.csv",header=T)
practicedata=data[c(1:100,1243:1350),]
write.csv(practicedata,file="familyrandomsamplelarge.csv",na="")
samp=read.cross(file ="familyrandomsamplelarge.csv"")
""
library(qtl)
samp=read.cross(file ="familyrandomsamplelarge.csv")
ls()
summary(samp)
plot(samp)
samp = calc.genoprob(samp)
out.nocovar = scanone(samp,pheno.col=1:2)
plotstruc = samp$pheno$plotstructure
out.acovar = scanone(samp,pheno.col = 1:2, addcovar = plotstruc)
plot(out.nocovar)
plot(out.acovar)
out.icovar = scanone(samp, pheno.col = 1:2, addcovar = plotstruc, intcovar = plotstruc)
summary(out.icovar)
plot(out.acovar, out.icovar, chr=c(2,5), col=c("blue", "red"))
plot(out.acovar, out.icovar, chr=c(2,5), lodcolumn=2,
col=c("blue", "red"))
out.plotint = out.icovar - out.acovar
plot(out.plotint, lodcolumn=1:2, chr=c(2,5), col=c("green", "purple"))
set.seed((1))
operm.acovar = scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
method='hk', n.perm=100)
operm.icovar =  scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
intcovar = plotstruc, method='hk', n.perm=100)
operm.plotint = operm.icovar - operm.acovar
summary(operm.plotint, alpha=c(0.05, 0.20))
summary(out.plotint, perms = operm.plotint, alpha=0.1,
format = 'allpeaks',pvalues = TRUE)
library(qtl)
samp=read.cross(file ="familyrandomsamplelarge.csv")
ls()
summary(samp)
plot(samp)
samp = calc.genoprob(samp)
out.nocovar = scanone(samp,pheno.col=1:2)
plotstruc = samp$pheno$plotstructure
out.acovar = scanone(samp,pheno.col = 1:2, addcovar = plotstruc)
plot(out.nocovar)
plot(out.acovar)
out.icovar = scanone(samp, pheno.col = 1:2, addcovar = plotstruc, intcovar = plotstruc)
summary(out.icovar)
plot(out.acovar, out.icovar, chr=c(2,5), col=c("blue", "red"))
plot(out.acovar, out.icovar, chr=c(2,5), lodcolumn=2,
col=c("blue", "red"))
out.plotint = out.icovar - out.acovar
plot(out.plotint, lodcolumn=1:2, chr=c(2,5), col=c("green", "purple"))
set.seed((1))
operm.acovar = scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
method='hk', n.perm=100)
operm.icovar =  scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
intcovar = plotstruc, method='hk', n.perm=100)
operm.plotint = operm.icovar - operm.acovar
summary(operm.plotint, alpha=c(0.05, 0.20))
summary(out.plotint, perms = operm.plotint, alpha=0.1,
format = 'allpeaks',pvalues = TRUE)
library(qtl)
samp=read.cross(file ="familyandrandom.csv")
ls()
summary(samp)
library(qtl)
samp=read.cross(file ="familyrandomsamplelarge.csv")
ls()
summary(samp)
plot(samp)
samp = calc.genoprob(samp)
out.nocovar = scanone(samp,pheno.col=1:2)
plotstruc = samp$pheno$plotstructure
out.acovar = scanone(samp,pheno.col = 1:2, addcovar = plotstruc)
plot(out.nocovar)
plot(out.acovar)
library(qtl)
samp=read.cross(file ="familyrandomsamplelarge.csv")
ls()
summary(samp)
setwd("~/Stapleton_Lab/FamilyRandom")
library(qtl)
samp=read.cross(file ="familyrandomsamplelarge.csv")
ls()
summary(samp)
library(qtl)
samp=read.cross(file ="familyrandomsamplelarge.csv")
samp=read.cross(file ="familyrandomsample.csv")
library(qtl)
samp=read.cross(file ="familyrandomsample.csv")
ls()
summary(samp)
plot(samp)
samp = calc.genoprob(samp)
out.nocovar = scanone(samp,pheno.col=1:2)
plotstruc = samp$pheno$plotstructure
out.acovar = scanone(samp,pheno.col = 1:2, addcovar = plotstruc)
plot(out.nocovar)
plot(out.acovar)
out.icovar = scanone(samp, pheno.col = 1:2, addcovar = plotstruc, intcovar = plotstruc)
summary(out.icovar)
plot(out.acovar, out.icovar, chr=c(2,5), col=c("blue", "red"))
plot(out.acovar, out.icovar, chr=c(2,5), lodcolumn=2,
col=c("blue", "red"))
out.plotint = out.icovar - out.acovar
plot(out.plotint, lodcolumn=1:2, chr=c(2,5), col=c("green", "purple"))
set.seed((1))
operm.acovar = scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
method='hk', n.perm=100)
operm.icovar =  scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
intcovar = plotstruc, method='hk', n.perm=100)
operm.plotint = operm.icovar - operm.acovar
summary(operm.plotint, alpha=c(0.05, 0.20))
summary(out.plotint, perms = operm.plotint, alpha=0.1,
format = 'allpeaks',pvalues = TRUE)
library(qtl)
samp=read.cross(file ="familyrandomsamplelarge.csv")
samp=read.cross(file ="familyrandomsamplelarge.csv")
ls()
summary(samp)
plot(samp)
samp = calc.genoprob(samp)
out.nocovar = scanone(samp,pheno.col=1:2)
plotstruc = samp$pheno$plotstructure
out.acovar = scanone(samp,pheno.col = 1:2, addcovar = plotstruc)
plot(out.nocovar)
plot(out.acovar)
par(mfrow(c(1,2)))
?par
par(mfrow=c(1,2))
plot(out.nocovar)
plot(out.acovar)
out.icovar = scanone(samp, pheno.col = 1:2, addcovar = plotstruc, intcovar = plotstruc)
summary(out.icovar)
plot(out.acovar, out.icovar, chr=c(2,5), col=c("blue", "red"))
plot(out.acovar, out.icovar, chr=c(2,5), lodcolumn=2,
col=c("blue", "red"))
out.plotint = out.icovar - out.acovar
plot(out.plotint, lodcolumn=1:2, chr=c(2,5), col=c("green", "purple"))
set.seed((1))
operm.acovar = scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
method='hk', n.perm=100)
operm.icovar =  scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
intcovar = plotstruc, method='hk', n.perm=100)
operm.plotint = operm.icovar - operm.acovar
summary(operm.plotint, alpha=c(0.05, 0.20))
summary(out.plotint, perms = operm.plotint, alpha=0.1,
format = 'allpeaks',pvalues = TRUE)
library(qtl)
samp=read.cross(file ="familyandrandom.csv")
ls()
summary(samp)
plot(samp)
samp = calc.genoprob(samp)
out.nocovar = scanone(samp,pheno.col=1:2)
plotstruc = samp$pheno$plotstructure
out.acovar = scanone(samp,pheno.col = 1:2, addcovar = plotstruc)
plot(out.nocovar)
plot(out.acovar)
out.icovar = scanone(samp, pheno.col = 1:2, addcovar = plotstruc, intcovar = plotstruc)
summary(out.icovar)
plot(out.acovar, out.icovar, chr=c(2,5), col=c("blue", "red"))
plot(out.acovar, out.icovar, chr=c(2,5), lodcolumn=2,
col=c("blue", "red"))
out.plotint = out.icovar - out.acovar
plot(out.plotint, lodcolumn=1:2, chr=c(2,5), col=c("green", "purple"))
set.seed((1))
operm.acovar = scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
method='hk', n.perm=100)
operm.icovar =  scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
intcovar = plotstruc, method='hk', n.perm=100)
operm.plotint = operm.icovar - operm.acovar
summary(operm.plotint, alpha=c(0.05, 0.20))
summary(out.plotint, perms = operm.plotint, alpha=0.1,
format = 'allpeaks',pvalues = TRUE)
plot(out.acovar, out.icovar, chr=c(1,10), col=c("blue", "red"))
plot(out.acovar, out.icovar, chr=c(1,10), lodcolumn=2,
col=c("blue", "red"))
out.plotint = out.icovar - out.acovar
plot(out.plotint, lodcolumn=1:2, chr=c(1,10), col=c("green", "purple"))
set.seed((1))
operm.acovar = scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
method='hk', n.perm=100)
library(qtl)
samp=read.cross(file ="familyandrandom.csv")
ls()
summary(samp)
plot(samp)
samp = calc.genoprob(samp)
out.nocovar = scanone(samp,pheno.col=1:2)
plotstruc = samp$pheno$plotstructure
out.acovar = scanone(samp,pheno.col = 1:2, addcovar = plotstruc)
plot(out.nocovar)
plot(out.acovar)
out.icovar = scanone(samp, pheno.col = 1:2, addcovar = plotstruc, intcovar = plotstruc)
summary(out.icovar)
plot(out.acovar, out.icovar, chr=c(1,10), col=c("blue", "red"))
plot(out.acovar, out.icovar, chr=c(1,10), lodcolumn=2,
col=c("blue", "red"))
out.plotint = out.icovar - out.acovar
plot(out.plotint, lodcolumn=1:2, chr=c(1,10), col=c("green", "purple"))
set.seed((1))
operm.acovar = scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
method='hk', n.perm=100)
operm.icovar =  scanone(samp, pheno.col= 1:2, addcovar=plotstruc,
intcovar = plotstruc, method='hk', n.perm=100)
operm.plotint = operm.icovar - operm.acovar
summary(operm.plotint, alpha=c(0.05, 0.20))
summary(out.plotint, perms = operm.plotint, alpha=0.1,
format = 'allpeaks',pvalues = TRUE)
plot(samp)
